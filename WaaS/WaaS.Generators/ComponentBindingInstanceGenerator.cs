using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;

namespace WaaS.Generators;

[Generator(LanguageNames.CSharp)]
public class ComponentBindingInstanceGenerator : IIncrementalGenerator
{
    private const string BindingNamespace = "WaaS.ComponentModel.Binding";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        {
            var source = context.SyntaxProvider.ForAttributeWithMetadataName(
                $"{BindingNamespace}.ComponentInterfaceAttribute",
                static (node, ct) => true,
                (context, ct) => context);

            context.RegisterSourceOutput(source, EmitInstance);
        }
    }

    private void EmitInstance(SourceProductionContext source, GeneratorAttributeSyntaxContext context)
    {
        StringBuilder sourceBuilder = new();
        // source.AddSource($"{context.TargetSymbol.MetadataName}.Instance.Marker.g.cs", "");

        var symbol = context.TargetSymbol;

        if (symbol is not INamedTypeSymbol namedSymbol) return;

        if (namedSymbol.TypeKind != TypeKind.Interface) return;

        if (namedSymbol.ContainingType != null)
        {
            source.ReportDiagnostic(Diagnostic.Create(Diagnostics.NestedClassDiagnostic,
                context.TargetNode.GetLocation()));
            return;
        }

        var identifier = symbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat
            .WithGlobalNamespaceStyle(SymbolDisplayGlobalNamespaceStyle.Omitted)
            .WithGenericsOptions(SymbolDisplayGenericsOptions.None));
        if (namedSymbol.Arity > 0) identifier += $"`{namedSymbol.Arity}";

        sourceBuilder.AppendLine(
/* lang=c#  */"""
              // <auto-generated />
              #pragma warning disable CS0108
              #nullable enable
              """);

        if (!namedSymbol.ContainingNamespace.IsGlobalNamespace)
            sourceBuilder.AppendLine(
                /* lang=c#  */
                $$"""
                  namespace {{namedSymbol.ContainingNamespace}}
                  {
                  """);

        var name = namedSymbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);

        static IEnumerable<ComponentApi> ExtractApis(INamedTypeSymbol symbol, bool includeBases = false)
        {
            var members = symbol.GetMembers().Where(member =>
                    member is { DeclaredAccessibility: Accessibility.Public, IsAbstract: true, IsStatic: false } &&
                    member.GetAttributes().Any(attr =>
                        attr.AttributeClass?.Matches("WaaS.ComponentModel.Binding.ComponentApiAttribute") ?? false) &&
                    member is IMethodSymbol or IPropertySymbol &&
                    member is not (IMethodSymbol and ({ IsGenericMethod: true } or
                        { MethodKind: MethodKind.PropertyGet or MethodKind.PropertySet })))
                .Select(member => new ComponentApi(member));
            if (includeBases)
                members = members.Concat(symbol.AllInterfaces.SelectMany(@interface => ExtractApis(@interface)));

            return members;
        }

        static IEnumerable<(INamedTypeSymbol type, string name)> ExtractResourceImplTypes(INamedTypeSymbol symbol,
            bool includeBases = false)
        {
            var members = symbol.GetMembers().OfType<INamedTypeSymbol>().Where(type =>
                type is
                {
                    DeclaredAccessibility: Accessibility.Public, TypeKind: TypeKind.Interface
                } &&
                type.AllInterfaces.Any(@interface =>
                    @interface.Matches("WaaS.ComponentModel.Binding.IResourceImpl"))).Select(type =>
            {
                var attr = type.GetAttributes().FirstOrDefault(attr =>
                    attr.AttributeClass?.Matches("WaaS.ComponentModel.Binding.ComponentResourceAttribute") ?? false);
                return (type,
                    attr?.ConstructorArguments.Length == 1 ? attr.ConstructorArguments[0].Value as string : null);
            }).Where(p => !string.IsNullOrEmpty(p.Item2));

            if (includeBases)
                members = members!.Concat(
                    symbol.AllInterfaces.SelectMany(@interface => ExtractResourceImplTypes(@interface)))!;

            return members!;
        }

        var directMembers = ExtractApis(namedSymbol, true).ToArray();

        var resourceTypes = ExtractResourceImplTypes(namedSymbol, true).ToArray();

        var allMembers =
            directMembers.Concat(resourceTypes.SelectMany(t => ExtractApis(t.type)));

        // TODO: generics
        sourceBuilder.AppendLine(
/* lang=c#  */$$"""
                    partial interface {{namedSymbol.Name}}
                    {
                        public static global::WaaS.ComponentModel.Runtime.IInstance CreateWaaSInstance({{name}} target) => new Instance(target);
                
                        private class Instance : global::WaaS.ComponentModel.Runtime.IInstance
                        {
                            private readonly {{name}} __waas__target;
                
                            public Instance({{name}} target)
                            {
                                this.__waas__target = target;
                            }
                
                            public bool TryGetExport<T>(string name, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out T? result) where T : global::WaaS.ComponentModel.Runtime.ISortedExportable
                            {
                                global::WaaS.ComponentModel.Runtime.ISortedExportable? exportable = name switch
                                {
                """);


        foreach (var member in directMembers)
            sourceBuilder.AppendLine(
                /* lang=c#  */
                $$"""
                                      @"{{Utils.ToComponentApiName(member.memberSymbol)}}" => __{{member.ExternalFunctionName}} ??= new {{member.ExternalFunctionName}}(__waas__target, __waas__target),
                  """);

        foreach (var pair in resourceTypes)
        {
            sourceBuilder.AppendLine(
                /* lang=c#  */
                $$"""
                                      @"{{pair.name}}" => __waas__target.{{Utils.ToCSharpName(pair.name)}}.Type,
                  """);

            foreach (var member in ExtractApis(pair.type))
                sourceBuilder.AppendLine(
                    /* lang=c#  */
                    $$"""
                                          @"{{Utils.ToComponentApiName(member.memberSymbol)}}" => __{{member.ExternalFunctionName}} ??= new {{member.ExternalFunctionName}}(__waas__target.{{Utils.ToCSharpName(pair.name)}}, __waas__target),
                      """);
        }

        sourceBuilder.AppendLine(
/* lang=c#  */"""
                                  _ => null
                              };
              
                              result = (T)exportable!;
                              return result != null;
                          }
              """);

        Dictionary<INamedTypeSymbol, string> encounteredResourceTypes = new(SymbolEqualityComparer.Default);

        foreach (var pair in resourceTypes)
            encounteredResourceTypes.Add(
                pair.type,
                Utils.ToCSharpName(pair.name));

        foreach (var member in allMembers)
        {
            var declaringType = member.memberSymbol.ContainingType;
            var declaringTypeName = declaringType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);

            var rootTypeName = namedSymbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);

            sourceBuilder.AppendLine(
/* lang=c#  */$$"""
                            private global::WaaS.ComponentModel.Runtime.IFunction? __{{member.ExternalFunctionName}};
                
                            class {{member.ExternalFunctionName}} : global::WaaS.ComponentModel.Binding.ExternalFunction
                            {
                                private readonly {{declaringTypeName}} __waas__target;
                                private readonly {{rootTypeName}} __waas__root;
                                
                                public override global::WaaS.ComponentModel.Runtime.IFunctionType Type { get; }
                            
                                public {{member.ExternalFunctionName}}({{declaringTypeName}} target, {{rootTypeName}} root)
                                {
                                    this.__waas__target = target;
                                    this.__waas__root = root;
                                    this.Type = new global::WaaS.ComponentModel.Models.ResolvedFunctionType(
                """);


            string GetResourcePropertyName(INamedTypeSymbol resourceType)
            {
                if (!encounteredResourceTypes.TryGetValue(resourceType, out var name))
                {
                    var attr = resourceType.GetAttributes().FirstOrDefault(attr =>
                        attr.AttributeClass?.Matches("WaaS.ComponentModel.Binding.ComponentResourceAttribute") ??
                        false);
                    encounteredResourceTypes[resourceType] = name = (attr?.ConstructorArguments.Length == 1
                        ? attr.ConstructorArguments[0].Value as string
                        : null) ?? resourceType.Name;
                    ;
                }

                return Utils.ToCSharpName(name);
            }

            if (!member.parameters.Any())
            {
                sourceBuilder.AppendLine(
/* lang=c#  */
                    """                        global::System.Array.Empty<global::WaaS.ComponentModel.Runtime.IParameter>(),""");
            }
            else
            {
                sourceBuilder.AppendLine(
/* lang=c#  */"""
                                      new global::WaaS.ComponentModel.Runtime.IParameter[]
                                      {
              """);
                foreach (var parameterType in member.parameters)
                {
                    sourceBuilder.Append(
                        /* lang=c#  */
                        $$"""
                                                      new global::WaaS.ComponentModel.Models.ResolvedParameter(@"{{parameterType.Name}}", 
                          """);

                    AppendParameterType(parameterType.Type, sourceBuilder, GetResourcePropertyName);
                    sourceBuilder.AppendLine("),");
                }

                sourceBuilder.AppendLine(
/* lang=c#    */"""                        },""");
            }

            sourceBuilder.Append("                    ");
            if (member.returnType != null)
                AppendParameterType(member.returnType, sourceBuilder, GetResourcePropertyName);
            else
                sourceBuilder.Append("null");

            sourceBuilder.AppendLine(");");

            sourceBuilder.AppendLine(
/* lang=c#  */"""                }""");

            sourceBuilder.AppendLine(
/* lang=c#    */"""
                            
                                protected override async global::STask.STaskVoid InvokeAsync(
                                    global::WaaS.Runtime.ExecutionContext __context,
                                    global::WaaS.ComponentModel.Binding.Pullable __arguments,
                                    global::STask.STaskVoid __frameMove,
                                    global::STask.STask<global::WaaS.ComponentModel.Runtime.ValuePusher> __resultPusherTask)
                                {
                """);
            foreach (var parameterSymbol in member.parameters)
                sourceBuilder.AppendLine(
                    /* lang=c#  */
                    $$"""
                                          var @{{parameterSymbol.Name}} = await __arguments.PullValueAsync<{{parameterSymbol.Type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}}>();
                      """);

            sourceBuilder.AppendLine(
/* lang=c#  */"""                    await __frameMove;""");

            sourceBuilder.Append(
/* lang=c#  */"""                    """);

            if (member.returnType != null) sourceBuilder.Append("var __waas__result = ");

            if (member.isAwaitable) sourceBuilder.Append("await ");

            sourceBuilder.Append(
                member.memberSymbol switch
                {
                    IMethodSymbol method =>
                        $"__waas__target.{method.Name}({string.Join(", ", member.parameters.Select(param => $"@{param.Name}"))})",
                    IPropertySymbol property => $"__waas__target.{property.Name}",
                    _ => throw new ArgumentOutOfRangeException()
                });
            sourceBuilder.AppendLine(";");

            if (member.returnType != null)
                sourceBuilder.AppendLine(
                    /* lang=c#  */
                    $$"""
                                          var __waas__resultPusher = await __resultPusherTask;
                                          global::WaaS.ComponentModel.Binding.FormatterProvider.GetFormatter<{{member.returnType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}}>().Push(__waas__result, __waas__resultPusher);
                      """);
            else
                sourceBuilder.AppendLine(
                    /* lang=c#  */
                    """                    await __resultPusherTask;""");
            sourceBuilder.AppendLine(
/* lang=c#    */"""
                                }
                            }
                """);
        }

        sourceBuilder.AppendLine(
/* lang=c#    */"""
                        }
                """);

        foreach (var pair in encounteredResourceTypes)
            // if (resourceTypes.Any(p => SymbolEqualityComparer.Default.Equals(p.type, pair.Key))) continue;
            sourceBuilder.AppendLine(
                /* lang=c#  */
                $$"""
                          {{pair.Key.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}} {{Utils.ToCSharpName(pair.Value)}} { get; }
                  """);

        // wrapper

        static void AppendWrapperBody(StringBuilder sourceBuilder, IEnumerable<ComponentApi> apis, string wrapperName)
        {
            sourceBuilder.AppendLine(
/* lang=c#  */$$"""
                            private readonly global::WaaS.ComponentModel.Runtime.IInstance instance;
                            private readonly global::WaaS.Runtime.ExecutionContext context;
                
                            public {{wrapperName}}(global::WaaS.ComponentModel.Runtime.IInstance instance,
                                global::WaaS.Runtime.ExecutionContext context)
                            {
                                this.instance = instance;
                                this.context = context;
                            }
                """);

            foreach (var member in apis)
            {
                sourceBuilder.AppendLine(
/* lang=c#  */$$"""
                            public {{(member.isAwaitable ? "async " : "")}}{{member.unawaitedReturnType?.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat) ?? "void"}} {{member.memberSymbol.Name}}({{string.Join(", ", member.parameters.Select(param => $"{param.Type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)} @{param.Name}"))}})
                            {
                                if (!this.instance.TryGetExport(@"{{Utils.ToComponentApiName(member.memberSymbol)}}", out global::WaaS.ComponentModel.Runtime.IFunction? function))
                                {
                                    throw new global::System.InvalidOperationException(@"A function ""{{Utils.ToComponentApiName(member.memberSymbol)}}"" is not found.");
                                }
                
                                using var binder = function.GetBinder(this.context);
                                using var pusher = binder.ArgumentPusher;
                """);

                foreach (var param in member.parameters)
                    sourceBuilder.AppendLine(
                        /* lang=c#  */
                        $$"""
                                          global::WaaS.ComponentModel.Binding.FormatterProvider.GetFormatter<{{param.Type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}}>().Push(@{{param.Name}}, pusher);
                          """);
                sourceBuilder.Append(
/* lang=c#  */"""                """);

                if (member.isAwaitable)
                    sourceBuilder.AppendLine("await binder.InvokeAsync(this.context);");
                else
                    sourceBuilder.AppendLine("binder.Invoke(this.context);");

                if (member.returnType != null)
                    sourceBuilder.AppendLine(
                        /* lang=c#  */
                        $$"""
                                          return binder.TakeResult<{{member.returnType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}}>();
                          """);
                sourceBuilder.AppendLine(
/* lang=c#  */"""            }""");
            }
        }

        sourceBuilder.AppendLine(
/* lang=c#  */$$"""
                        public readonly struct Wrapper : {{namedSymbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}}
                        {
                """);


        AppendWrapperBody(sourceBuilder, directMembers, "Wrapper");

        var resourceTypesImpl = ExtractResourceImplTypes(namedSymbol, true);

        foreach (var pair in resourceTypesImpl)
        {
            var propName = Utils.ToCSharpName(pair.name);
            sourceBuilder.AppendLine(
/* lang=c#  */$$"""
                        public readonly struct {{propName}}Wrapper : {{pair.type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}}
                        {
                """);
            AppendWrapperBody(sourceBuilder, ExtractApis(pair.type), $"{propName}Wrapper");
            sourceBuilder.AppendLine(
/* lang=c#  */$$"""
                            global::WaaS.ComponentModel.Runtime.IResourceType global::WaaS.ComponentModel.Binding.IResourceImpl.Type { get { if (!this.instance.TryGetExport(@"{{Utils.ToComponentName(pair.name)}}", out global::WaaS.ComponentModel.Runtime.IResourceType? type)) throw new global::System.InvalidOperationException(@"Resource type not found."); return type; } }
                        }
                """);
        }

        foreach (var pair in encounteredResourceTypes)
        {
            var resourceName = Utils.ToCSharpName(pair.Value);
            sourceBuilder.AppendLine(
                $"            public {pair.Key.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)} {resourceName} => new {pair.Key.ContainingType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}.Wrapper.{resourceName}Wrapper(instance, context);");
        }


        sourceBuilder.AppendLine(
/* lang=c#    */"""
                        }
                """);

        sourceBuilder.AppendLine(
/* lang=c#    */"""
                    }
                """);


        if (!namedSymbol.ContainingNamespace.IsGlobalNamespace)
            sourceBuilder.AppendLine(
                /* lang=c#  */
                $$"""
                  } // namespace {{namedSymbol.ContainingNamespace}}
                  """);


        source.AddSource($"{identifier}.Instance.g.cs", sourceBuilder.ToString());
    }

    private static void AppendParameterType(ITypeSymbol type, StringBuilder sourceBuilder,
        Func<INamedTypeSymbol, string> getResourcePropertyName)
    {
        if (type is INamedTypeSymbol named)
        {
            if (named.IsGenericType)
            {
                var unbound = named.ConstructUnboundGenericType();

                if (unbound.Matches("System.Nullable`1") ||
                    unbound.Matches("WaaS.ComponentModel.Binding.Option`1"))
                {
                    var element = named.TypeArguments[0];
                    sourceBuilder.Append("new global::WaaS.ComponentModel.Models.ResolvedOptionType(");
                    AppendParameterType(element, sourceBuilder, getResourcePropertyName);
                    sourceBuilder.Append(")");
                    return;
                }
            }

            if (named.NullableAnnotation == NullableAnnotation.Annotated)
            {
                sourceBuilder.Append("new global::WaaS.ComponentModel.Models.ResolvedOptionType(");
                AppendParameterType(named.WithNullableAnnotation(NullableAnnotation.NotAnnotated), sourceBuilder,
                    getResourcePropertyName);
                sourceBuilder.Append(")");
                return;
            }

            if (named.IsTupleType)
            {
                sourceBuilder.Append(
                    "new global::WaaS.ComponentModel.Models.ResolvedTupleType(new global::WaaS.ComponentModel.Runtime.IValueType[] {");
                foreach (var element in named.TupleElements)
                {
                    AppendParameterType(element.Type, sourceBuilder, getResourcePropertyName);
                    sourceBuilder.Append(", ");
                }

                sourceBuilder.Append("})");
                return;
            }

            if (named.TypeKind is TypeKind.Enum)
            {
                var values = named.GetMembers().OfType<IFieldSymbol>().Where(field => field.IsConst && field.IsStatic);
                if (named.GetAttributes().Any(attr => attr.AttributeClass?.Matches("System.FlagsAttribute") ?? false))
                    // flags
                    // TODO: validate values
                    sourceBuilder.Append("global::WaaS.ComponentModel.Models.FlagsType.Create(new string[] {");
                else
                    // enum
                    // TODO: validate values
                    sourceBuilder.Append("global::WaaS.ComponentModel.Models.EnumType.Create(new string[] {");

                foreach (var value in values) sourceBuilder.Append($"\"{value.Name}\", ");

                sourceBuilder.Append("})");
                return;
            }

            if (named.GetAttributes().Any(attr =>
                    attr.AttributeClass?.Matches("WaaS.ComponentModel.Binding.ComponentRecordAttribute") ?? false))
            {
                // record
                sourceBuilder.Append("new global::WaaS.ComponentModel.Models.ResolvedRecordType(new [] {");
                var members = named.GetRecordMembers();

                foreach (var member in members)
                {
                    var memberType = member switch
                    {
                        IFieldSymbol field => field.Type,
                        IPropertySymbol property => property.Type,
                        _ => throw new ArgumentOutOfRangeException()
                    };
                    sourceBuilder.Append(
                        $"new global::WaaS.ComponentModel.Models.ResolvedRecordField(\"{member.Name}\", ");
                    AppendParameterType(memberType, sourceBuilder, getResourcePropertyName);
                    sourceBuilder.Append("), ");
                }

                sourceBuilder.Append("})");
                return;
            }

            if (named.GetAttributes().Any(attr =>
                    attr.AttributeClass?.Matches("WaaS.ComponentModel.Binding.ComponentVariantAttribute") ?? false))
            {
                // variant
                sourceBuilder.Append("new global::WaaS.ComponentModel.Models.ResolvedVariantType(new [] {");
                var members = named.GetVariantMembers();

                foreach (var member in members)
                {
                    var memberType = member switch
                    {
                        IFieldSymbol field => field.Type,
                        IPropertySymbol property => property.Type,
                        _ => throw new ArgumentOutOfRangeException()
                    };
                    if (memberType.TryGetNullableElement(out var elementType)) memberType = elementType!;

                    if (memberType.NullableAnnotation is NullableAnnotation.Annotated)
                        memberType = memberType.WithNullableAnnotation(NullableAnnotation.NotAnnotated);

                    sourceBuilder.Append(
                        $"new global::WaaS.ComponentModel.Models.ResolvedVariantCase(\"{member.Name}\", ");

                    if (memberType.Matches("WaaS.ComponentModel.Binding.None"))
                        sourceBuilder.Append("null");
                    else
                        AppendParameterType(memberType, sourceBuilder, getResourcePropertyName);

                    sourceBuilder.Append("), ");
                }

                sourceBuilder.Append("})");
                return;
            }

            {
                var attr = named.GetAttributes().FirstOrDefault(attr =>
                    attr.AttributeClass?.Matches("WaaS.ComponentModel.Binding.ComponentAliasAttribute") ?? false);
                if (attr != null && attr.ConstructorArguments.Length == 1 &&
                    attr.ConstructorArguments[0].Value is ITypeSymbol targetType)
                {
                    // alias
                    AppendParameterType(targetType, sourceBuilder, getResourcePropertyName);
                    return;
                }
            }


            if (named.IsGenericType)
            {
                var unbound = named.ConstructUnboundGenericType();
                if (unbound.Matches("System.ReadOnlyMemory`1"))
                {
                    var element = named.TypeArguments[0];
                    sourceBuilder.Append("new global::WaaS.ComponentModel.Models.ResolvedListType(");
                    AppendParameterType(element, sourceBuilder, getResourcePropertyName);
                    sourceBuilder.Append(")");
                    return;
                }

                if (unbound.Matches("WaaS.ComponentModel.Binding.Result`2"))
                {
                    var ok = named.TypeArguments[0];
                    var error = named.TypeArguments[1];
                    sourceBuilder.Append("new global::WaaS.ComponentModel.Models.ResolvedResultType(");
                    AppendParameterType(ok, sourceBuilder, getResourcePropertyName);
                    sourceBuilder.Append(", ");
                    AppendParameterType(error, sourceBuilder, getResourcePropertyName);
                    sourceBuilder.Append(")");
                    return;
                }

                if (named.TypeArguments.Length == 1 &&
                    named.TypeArguments[0] is INamedTypeSymbol resourceType &&
                    resourceType.AllInterfaces.Any(@if => @if.Matches("WaaS.ComponentModel.Binding.IResourceImpl")))
                {
                    if (unbound.Matches("WaaS.ComponentModel.Binding.Owned`1"))
                    {
                        // owned

                        sourceBuilder.Append(
                            "new global::WaaS.ComponentModel.Models.ResolvedOwnedType(__waas__root.");
                        sourceBuilder.Append(getResourcePropertyName(resourceType));
                        sourceBuilder.Append(".Type)");
                        return;
                    }

                    if (unbound.Matches("WaaS.ComponentModel.Binding.Borrowed`1"))
                    {
                        // borrowed
                        getResourcePropertyName(resourceType);
                        sourceBuilder.Append(
                            "new global::WaaS.ComponentModel.Models.ResolvedBorrowedType(__waas__root.");
                        sourceBuilder.Append(getResourcePropertyName(resourceType));
                        sourceBuilder.Append(".Type)");
                        return;
                    }
                }
            }
        }


        var result = type.SpecialType switch
        {
            SpecialType.System_Void => null,
            SpecialType.System_Boolean =>
                "global::WaaS.ComponentModel.Models.PrimitiveValueType.GetBoxed(WaaS.ComponentModel.Runtime.PrimitiveValueTypeKind.Bool)",
            SpecialType.System_SByte =>
                "global::WaaS.ComponentModel.Models.PrimitiveValueType.GetBoxed(WaaS.ComponentModel.Runtime.PrimitiveValueTypeKind.S8)",
            SpecialType.System_Byte =>
                "global::WaaS.ComponentModel.Models.PrimitiveValueType.GetBoxed(WaaS.ComponentModel.Runtime.PrimitiveValueTypeKind.U8)",
            SpecialType.System_Int16 =>
                "global::WaaS.ComponentModel.Models.PrimitiveValueType.GetBoxed(WaaS.ComponentModel.Runtime.PrimitiveValueTypeKind.S16)",
            SpecialType.System_UInt16 =>
                "global::WaaS.ComponentModel.Models.PrimitiveValueType.GetBoxed(WaaS.ComponentModel.Runtime.PrimitiveValueTypeKind.U16)",
            SpecialType.System_Int32 =>
                "global::WaaS.ComponentModel.Models.PrimitiveValueType.GetBoxed(WaaS.ComponentModel.Runtime.PrimitiveValueTypeKind.S32)",
            SpecialType.System_UInt32 =>
                "global::WaaS.ComponentModel.Models.PrimitiveValueType.GetBoxed(WaaS.ComponentModel.Runtime.PrimitiveValueTypeKind.U32)",
            SpecialType.System_Int64 =>
                "global::WaaS.ComponentModel.Models.PrimitiveValueType.GetBoxed(WaaS.ComponentModel.Runtime.PrimitiveValueTypeKind.S64)",
            SpecialType.System_UInt64 =>
                "global::WaaS.ComponentModel.Models.PrimitiveValueType.GetBoxed(WaaS.ComponentModel.Runtime.PrimitiveValueTypeKind.U64)",
            SpecialType.System_Single =>
                "global::WaaS.ComponentModel.Models.PrimitiveValueType.GetBoxed(WaaS.ComponentModel.Runtime.PrimitiveValueTypeKind.F32)",
            SpecialType.System_Double =>
                "global::WaaS.ComponentModel.Models.PrimitiveValueType.GetBoxed(WaaS.ComponentModel.Runtime.PrimitiveValueTypeKind.F64)",
            SpecialType.System_String =>
                "global::WaaS.ComponentModel.Models.PrimitiveValueType.GetBoxed(WaaS.ComponentModel.Runtime.PrimitiveValueTypeKind.String)",
            _ => null
        };

        if (type.Matches("WaaS.ComponentModel.Binding.ComponentChar"))
            result =
                "global::WaaS.ComponentModel.Models.PrimitiveValueType.GetBoxed(WaaS.ComponentModel.Runtime.PrimitiveValueTypeKind.Char)";

        sourceBuilder.Append(result ?? $"null /* {type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}*/");
    }
}