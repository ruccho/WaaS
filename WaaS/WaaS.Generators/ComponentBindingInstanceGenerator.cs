using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;

namespace WaaS.Generators;

[Generator(LanguageNames.CSharp)]
public class ComponentBindingInstanceGenerator : IIncrementalGenerator
{
    private const string BindingNamespace = "WaaS.ComponentModel.Binding";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        {
            var source = context.SyntaxProvider.ForAttributeWithMetadataName(
                $"{BindingNamespace}.ComponentInterfaceAttribute",
                static (node, ct) => true,
                (context, ct) => context);

            context.RegisterSourceOutput(source, EmitInstance);
        }
    }

    private void EmitInstance(SourceProductionContext source, GeneratorAttributeSyntaxContext context)
    {
        StringBuilder sourceBuilder = new();

        var symbol = context.TargetSymbol;

        if (symbol is not INamedTypeSymbol namedSymbol) return;

        if (namedSymbol.TypeKind != TypeKind.Interface) return;

        if (namedSymbol.ContainingType != null)
        {
            source.ReportDiagnostic(Diagnostic.Create(Diagnostics.NestedClassDiagnostic,
                context.TargetNode.GetLocation()));
            return;
        }

        var identifier = symbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat
            .WithGlobalNamespaceStyle(SymbolDisplayGlobalNamespaceStyle.Omitted)
            .WithGenericsOptions(SymbolDisplayGenericsOptions.None));
        if (namedSymbol.Arity > 0) identifier += $"`{namedSymbol.Arity}";

        sourceBuilder.AppendLine(
/* lang=c#  */"""
              // <auto-generated />
              #nullable enable
              """);

        if (!namedSymbol.ContainingNamespace.IsGlobalNamespace)
            sourceBuilder.AppendLine(
                /* lang=c#  */
                $$"""
                  namespace {{namedSymbol.ContainingNamespace}}
                  {
                  """);

        var name = namedSymbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
        var nameWithoutTypeParams =
            namedSymbol.ToDisplayString(
                SymbolDisplayFormat.FullyQualifiedFormat.WithGenericsOptions(SymbolDisplayGenericsOptions.None));

        static IEnumerable<ComponentApi> ExtractApis(INamedTypeSymbol symbol, bool includeBases = false)
        {
            var members = symbol.GetMembers().Where(member =>
                    member is { DeclaredAccessibility: Accessibility.Public, IsAbstract: true, IsStatic: false } &&
                    member.GetAttributes().Any(attr =>
                        attr.AttributeClass.Matches("WaaS.ComponentModel.Binding.ComponentApiAttribute")) &&
                    member is IMethodSymbol or IPropertySymbol &&
                    member is not (IMethodSymbol and ({ IsGenericMethod: true } or
                        { MethodKind: MethodKind.PropertyGet or MethodKind.PropertySet })))
                .Select(member => new ComponentApi(member));
            if (includeBases)
                members = members.Concat(symbol.AllInterfaces.SelectMany(@interface => ExtractApis(@interface)));

            return members;
        }

        static IEnumerable<IPropertySymbol> ExtractResourceProperties(INamedTypeSymbol symbol,
            bool includeBases = false)
        {
            return symbol.GetMembers().OfType<IPropertySymbol>().Where(prop =>
                prop.DeclaredAccessibility == Accessibility.Public &&
                prop is
                {
                    DeclaredAccessibility: Accessibility.Public, IsAbstract: true, IsStatic: false, GetMethod: not null
                } &&
                prop.Type is INamedTypeSymbol propertyType && propertyType.AllInterfaces.Any(@interface =>
                    @interface.Matches("WaaS.ComponentModel.Runtime.IResourceType")) &&
                prop.GetAttributes().Any(attr =>
                    attr.AttributeClass.Matches("WaaS.ComponentModel.Binding.ComponentResourceAttribute")));
        }

        var directMembers = ExtractApis(namedSymbol).ToArray();

        var resourceProperties = ExtractResourceProperties(namedSymbol);
        var resourceTypes = resourceProperties.Select(p => p.Type as INamedTypeSymbol);

        var allMembers =
            directMembers.Concat(resourceTypes.SelectMany(t => ExtractApis(t)));

        // TODO: generics
        sourceBuilder.AppendLine(
/* lang=c#  */$$"""
                    partial interface {{namedSymbol.Name}}
                    {
                        public static global::WaaS.ComponentModel.Runtime.IInstance CreateWaaSInstance({{name}} target) => new Instance(target);
                
                        private class Instance : global::WaaS.ComponentModel.Runtime.IInstance
                        {
                            private readonly {{name}} __waas__target;
                
                            public Instance({{name}} target)
                            {
                                this.__waas__target = target;
                            }
                
                            public bool TryGetExport<T>(string name, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out T? result) where T : global::WaaS.ComponentModel.Runtime.ISortedExportable
                            {
                                global::WaaS.ComponentModel.Runtime.ISortedExportable? exportable = name switch
                                {
                """);


        foreach (var member in directMembers)
            sourceBuilder.AppendLine(
                /* lang=c#  */
                $$"""
                                      @"{{Utils.ToComponentApiName(member.memberSymbol)}}" => __{{member.ExternalFunctionName}} ??= new {{member.ExternalFunctionName}}(__waas__target),
                  """);

        foreach (var prop in resourceProperties)
        {
            sourceBuilder.AppendLine(
                /* lang=c#  */
                $$"""
                                      @"{{Utils.ToComponentResourceName(prop)}}" => __waas__target.{{prop.Name}},
                  """);

            foreach (var member in ExtractApis((prop.Type as INamedTypeSymbol)!))
                sourceBuilder.AppendLine(
                    /* lang=c#  */
                    $$"""
                                          @"{{Utils.ToComponentApiName(member.memberSymbol)}}" => __{{member.ExternalFunctionName}} ??= new {{member.ExternalFunctionName}}(__waas__target.{{prop.Name}}),
                      """);
        }

        sourceBuilder.AppendLine(
/* lang=c#  */"""
                                  _ => null
                              };
              
                              result = (T)exportable!;
                              return result != null;
                          }
              """);

        foreach (var member in allMembers)
        {
            var declaringType = member.memberSymbol.ContainingType;
            var declaringTypeName = declaringType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);

            sourceBuilder.AppendLine(
/* lang=c#  */$$"""
                            private global::WaaS.ComponentModel.Runtime.IFunction? __{{member.ExternalFunctionName}};
                
                            class {{member.ExternalFunctionName}} : global::WaaS.ComponentModel.Binding.ExternalFunction
                            {
                                private readonly {{declaringTypeName}} __waas__target;
                            
                                public {{member.ExternalFunctionName}}({{declaringTypeName}} target)
                                {
                                    this.__waas__target = target;
                                }
                            
                                public override global::WaaS.ComponentModel.Runtime.IFunctionType Type { get; } =
                                    new global::WaaS.ComponentModel.Models.ResolvedFunctionType(
                """);

            if (!member.parameters.Any())
            {
                sourceBuilder.AppendLine(
/* lang=c#  */
                    """                        global::System.Array.Empty<global::WaaS.ComponentModel.Runtime.IParameter>(),""");
            }
            else
            {
                sourceBuilder.AppendLine(
/* lang=c#  */"""
                                      new global::WaaS.ComponentModel.Runtime.IParameter[]
                                      {
              """);
                foreach (var parameterType in member.parameters)
                    sourceBuilder.AppendLine(
                        /* lang=c#  */
                        $$"""
                                                      new global::WaaS.ComponentModel.Models.ResolvedParameter(@"{{parameterType.Name}}", global::WaaS.ComponentModel.Binding.FormatterProvider.GetFormatter<{{parameterType.Type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}}>().Type),  
                          """);

                sourceBuilder.AppendLine(
/* lang=c#    */"""                        },""");
            }

            sourceBuilder.AppendLine(
/* lang=c#  */$$"""
                                        {{(member.returnType != null ? $"global::WaaS.ComponentModel.Binding.FormatterProvider.GetFormatter<{member.returnType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}>().Type" : "null")}});
                """);

            sourceBuilder.AppendLine(
/* lang=c#    */"""
                            
                                protected override async global::STask.STaskVoid PullArgumentsAsync(
                                    global::WaaS.Runtime.ExecutionContext __context,
                                    global::WaaS.ComponentModel.Binding.PushPullAdapter __adapter,
                                    global::STask.STaskVoid __frameMove,
                                    global::STask.STask<global::WaaS.ComponentModel.Runtime.ValuePusher> __resultPusherTask)
                                {
                """);
            foreach (var parameterSymbol in member.parameters)
                sourceBuilder.AppendLine(
                    /* lang=c#  */
                    $$"""
                                          var @{{parameterSymbol.Name}} = await __adapter.PullValueAsync<{{parameterSymbol.Type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}}>();
                      """);

            sourceBuilder.AppendLine(
/* lang=c#  */"""                    await __frameMove;""");

            sourceBuilder.Append(
/* lang=c#  */"""                    """);

            if (member.returnType != null) sourceBuilder.Append("var __waas__result = ");

            if (member.isAwaitable) sourceBuilder.Append("await ");

            sourceBuilder.Append(
                member.memberSymbol switch
                {
                    IMethodSymbol method =>
                        $"__waas__target.{method.Name}({string.Join(", ", member.parameters.Select(param => $"@{param.Name}"))})",
                    IPropertySymbol property => $"__waas__target.{property.Name}"
                });
            sourceBuilder.AppendLine(";");

            if (member.returnType != null)
                sourceBuilder.AppendLine(
                    /* lang=c#  */
                    $$"""
                                          var __waas__resultPusher = await __resultPusherTask;
                                          global::WaaS.ComponentModel.Binding.FormatterProvider.GetFormatter<{{member.returnType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}}>().Push(__waas__result, __waas__resultPusher);
                      """);
            else
                sourceBuilder.AppendLine(
                    /* lang=c#  */
                    """                    await __resultPusherTask;""");
            sourceBuilder.AppendLine(
/* lang=c#    */"""
                                }
                            }
                """);
        }

        sourceBuilder.AppendLine(
/* lang=c#    */"""
                        }
                """);

        // wrapper

        static void AppendWrapperBody(StringBuilder sourceBuilder, IEnumerable<ComponentApi> apis, string wrapperName)
        {
            sourceBuilder.AppendLine(
/* lang=c#  */$$"""
                            private readonly global::WaaS.ComponentModel.Runtime.IInstance instance;
                            private readonly global::WaaS.Runtime.ExecutionContext context;
                
                            public {{wrapperName}}(global::WaaS.ComponentModel.Runtime.IInstance instance,
                                global::WaaS.Runtime.ExecutionContext context)
                            {
                                this.instance = instance;
                                this.context = context;
                            }
                """);

            foreach (var member in apis)
            {
                sourceBuilder.AppendLine(
/* lang=c#  */$$"""
                            public {{(member.isAwaitable ? "async " : "")}}{{member.unawaitedReturnType?.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat) ?? "void"}} {{member.memberSymbol.Name}}({{string.Join(", ", member.parameters.Select(param => $"{param.Type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)} @{param.Name}"))}})
                            {
                                if (!this.instance.TryGetExport(@"{{Utils.ToComponentApiName(member.memberSymbol)}}", out global::WaaS.ComponentModel.Runtime.IFunction? function))
                                {
                                    throw new global::System.InvalidOperationException(@"A function ""{{Utils.ToComponentApiName(member.memberSymbol)}}"" is not found.");
                                }
                
                                using var binder = function.GetBinder(this.context);
                                using var pusher = binder.ArgumentPusher;
                """);

                foreach (var param in member.parameters)
                    sourceBuilder.AppendLine(
                        /* lang=c#  */
                        $$"""
                                          global::WaaS.ComponentModel.Binding.FormatterProvider.GetFormatter<{{param.Type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}}>().Push(@{{param.Name}}, pusher);
                          """);
                sourceBuilder.Append(
/* lang=c#  */"""                """);

                if (member.isAwaitable)
                    sourceBuilder.AppendLine("await binder.InvokeAsync(this.context);");
                else
                    sourceBuilder.AppendLine("binder.Invoke(this.context);");

                if (member.returnType != null)
                    sourceBuilder.AppendLine(
                        /* lang=c#  */
                        $$"""
                                          return binder.TakeResult<{{member.returnType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}}>();
                          """);
                sourceBuilder.AppendLine(
/* lang=c#  */"""            }""");
            }
        }

        sourceBuilder.AppendLine(
/* lang=c#  */$$"""
                        public readonly struct Wrapper : {{namedSymbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}}
                        {
                """);


        var directImplMembers = ExtractApis(namedSymbol, true).ToArray();
        AppendWrapperBody(sourceBuilder, directImplMembers, "Wrapper");

        var resourcePropertiesImpl = ExtractResourceProperties(namedSymbol, true);

        foreach (var prop in resourcePropertiesImpl)
        {
            sourceBuilder.AppendLine(
                $"            {prop.Type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)} {namedSymbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}.{prop.Name} => this.{prop.Name};");
            sourceBuilder.AppendLine(
                $"            public {prop.Name}Wrapper {prop.Name} => new(instance, context);");
            sourceBuilder.AppendLine(
/* lang=c#  */$$"""
                        public readonly struct {{prop.Name}}Wrapper : {{prop.Type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}}
                        {
                """);
            AppendWrapperBody(sourceBuilder, ExtractApis((prop.Type as INamedTypeSymbol)!), $"{prop.Name}Wrapper");
            sourceBuilder.AppendLine(
/* lang=c#    */"""
                             global::WaaS.ComponentModel.Runtime.IFunction global::WaaS.ComponentModel.Runtime.IResourceType.Destructor => throw new global::System.InvalidOperationException("generated wrapper has no destructor");
                        }
                """);
        }

        sourceBuilder.AppendLine(
/* lang=c#    */"""
                        }
                """);

        sourceBuilder.AppendLine(
/* lang=c#    */"""
                    }
                """);


        if (!namedSymbol.ContainingNamespace.IsGlobalNamespace)
            sourceBuilder.AppendLine(
                /* lang=c#  */
                $$"""
                  } // namespace {{namedSymbol.ContainingNamespace}}
                  """);


        source.AddSource($"{identifier}.Instance.g.cs", sourceBuilder.ToString());
    }
}