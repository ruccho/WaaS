// <auto-generated />
#nullable enable
namespace Wasi.Sockets
{
    [global::WaaS.ComponentModel.Binding.ComponentInterface]
    public partial interface Tcp
    {
        global::WaaS.ComponentModel.Binding.Result<global::WaaS.ComponentModel.Binding.None, Wasi.Sockets.Network.ErrorCode> [method]tcpSocket.startBind(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Sockets.Tcp.TcpSocket> self, global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Sockets.Network.Network> network, Wasi.Sockets.Network.IpSocketAddress localAddress);
        global::WaaS.ComponentModel.Binding.Result<global::WaaS.ComponentModel.Binding.None, Wasi.Sockets.Network.ErrorCode> [method]tcpSocket.finishBind(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Sockets.Tcp.TcpSocket> self);
        global::WaaS.ComponentModel.Binding.Result<global::WaaS.ComponentModel.Binding.None, Wasi.Sockets.Network.ErrorCode> [method]tcpSocket.startConnect(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Sockets.Tcp.TcpSocket> self, global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Sockets.Network.Network> network, Wasi.Sockets.Network.IpSocketAddress remoteAddress);
        global::WaaS.ComponentModel.Binding.Result<(global::WaaS.ComponentModel.Runtime.Owned<Wasi.Io.Streams.InputStream>, global::WaaS.ComponentModel.Runtime.Owned<Wasi.Io.Streams.OutputStream>), Wasi.Sockets.Network.ErrorCode> [method]tcpSocket.finishConnect(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Sockets.Tcp.TcpSocket> self);
        global::WaaS.ComponentModel.Binding.Result<global::WaaS.ComponentModel.Binding.None, Wasi.Sockets.Network.ErrorCode> [method]tcpSocket.startListen(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Sockets.Tcp.TcpSocket> self);
        global::WaaS.ComponentModel.Binding.Result<global::WaaS.ComponentModel.Binding.None, Wasi.Sockets.Network.ErrorCode> [method]tcpSocket.finishListen(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Sockets.Tcp.TcpSocket> self);
        global::WaaS.ComponentModel.Binding.Result<(global::WaaS.ComponentModel.Runtime.Owned<Wasi.Sockets.Tcp.TcpSocket>, global::WaaS.ComponentModel.Runtime.Owned<Wasi.Io.Streams.InputStream>, global::WaaS.ComponentModel.Runtime.Owned<Wasi.Io.Streams.OutputStream>), Wasi.Sockets.Network.ErrorCode> [method]tcpSocket.accept(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Sockets.Tcp.TcpSocket> self);
        global::WaaS.ComponentModel.Binding.Result<Wasi.Sockets.Network.IpSocketAddress, Wasi.Sockets.Network.ErrorCode> [method]tcpSocket.localAddress(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Sockets.Tcp.TcpSocket> self);
        global::WaaS.ComponentModel.Binding.Result<Wasi.Sockets.Network.IpSocketAddress, Wasi.Sockets.Network.ErrorCode> [method]tcpSocket.remoteAddress(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Sockets.Tcp.TcpSocket> self);
        bool [method]tcpSocket.isListening(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Sockets.Tcp.TcpSocket> self);
        Wasi.Sockets.Network.IpAddressFamily [method]tcpSocket.addressFamily(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Sockets.Tcp.TcpSocket> self);
        global::WaaS.ComponentModel.Binding.Result<global::WaaS.ComponentModel.Binding.None, Wasi.Sockets.Network.ErrorCode> [method]tcpSocket.setListenBacklogSize(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Sockets.Tcp.TcpSocket> self, ulong value);
        global::WaaS.ComponentModel.Binding.Result<bool, Wasi.Sockets.Network.ErrorCode> [method]tcpSocket.keepAliveEnabled(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Sockets.Tcp.TcpSocket> self);
        global::WaaS.ComponentModel.Binding.Result<global::WaaS.ComponentModel.Binding.None, Wasi.Sockets.Network.ErrorCode> [method]tcpSocket.setKeepAliveEnabled(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Sockets.Tcp.TcpSocket> self, bool value);
        global::WaaS.ComponentModel.Binding.Result<ulong, Wasi.Sockets.Network.ErrorCode> [method]tcpSocket.keepAliveIdleTime(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Sockets.Tcp.TcpSocket> self);
        global::WaaS.ComponentModel.Binding.Result<global::WaaS.ComponentModel.Binding.None, Wasi.Sockets.Network.ErrorCode> [method]tcpSocket.setKeepAliveIdleTime(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Sockets.Tcp.TcpSocket> self, ulong value);
        global::WaaS.ComponentModel.Binding.Result<ulong, Wasi.Sockets.Network.ErrorCode> [method]tcpSocket.keepAliveInterval(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Sockets.Tcp.TcpSocket> self);
        global::WaaS.ComponentModel.Binding.Result<global::WaaS.ComponentModel.Binding.None, Wasi.Sockets.Network.ErrorCode> [method]tcpSocket.setKeepAliveInterval(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Sockets.Tcp.TcpSocket> self, ulong value);
        global::WaaS.ComponentModel.Binding.Result<uint, Wasi.Sockets.Network.ErrorCode> [method]tcpSocket.keepAliveCount(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Sockets.Tcp.TcpSocket> self);
        global::WaaS.ComponentModel.Binding.Result<global::WaaS.ComponentModel.Binding.None, Wasi.Sockets.Network.ErrorCode> [method]tcpSocket.setKeepAliveCount(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Sockets.Tcp.TcpSocket> self, uint value);
        global::WaaS.ComponentModel.Binding.Result<byte, Wasi.Sockets.Network.ErrorCode> [method]tcpSocket.hopLimit(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Sockets.Tcp.TcpSocket> self);
        global::WaaS.ComponentModel.Binding.Result<global::WaaS.ComponentModel.Binding.None, Wasi.Sockets.Network.ErrorCode> [method]tcpSocket.setHopLimit(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Sockets.Tcp.TcpSocket> self, byte value);
        global::WaaS.ComponentModel.Binding.Result<ulong, Wasi.Sockets.Network.ErrorCode> [method]tcpSocket.receiveBufferSize(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Sockets.Tcp.TcpSocket> self);
        global::WaaS.ComponentModel.Binding.Result<global::WaaS.ComponentModel.Binding.None, Wasi.Sockets.Network.ErrorCode> [method]tcpSocket.setReceiveBufferSize(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Sockets.Tcp.TcpSocket> self, ulong value);
        global::WaaS.ComponentModel.Binding.Result<ulong, Wasi.Sockets.Network.ErrorCode> [method]tcpSocket.sendBufferSize(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Sockets.Tcp.TcpSocket> self);
        global::WaaS.ComponentModel.Binding.Result<global::WaaS.ComponentModel.Binding.None, Wasi.Sockets.Network.ErrorCode> [method]tcpSocket.setSendBufferSize(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Sockets.Tcp.TcpSocket> self, ulong value);
        global::WaaS.ComponentModel.Runtime.Owned<Wasi.Io.Poll.Pollable> [method]tcpSocket.subscribe(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Sockets.Tcp.TcpSocket> self);
        global::WaaS.ComponentModel.Binding.Result<global::WaaS.ComponentModel.Binding.None, Wasi.Sockets.Network.ErrorCode> [method]tcpSocket.shutdown(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Sockets.Tcp.TcpSocket> self, Wasi.Sockets.Tcp.ShutdownType shutdownType);
    }
}
