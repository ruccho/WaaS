// <auto-generated />
#nullable enable

namespace Wasi.Filesystem
{
    /// <summary>
    ///     WASI filesystem is a filesystem API primarily intended to let users run WASI
    ///     programs that access their files on their existing filesystems, without
    ///     significant overhead.
    ///     
    ///     It is intended to be roughly portable between Unix-family platforms and
    ///     Windows, though it does not hide many of the major differences.
    ///     
    ///     Paths are passed as interface-type `string`s, meaning they must consist of
    ///     a sequence of Unicode Scalar Values (USVs). Some filesystems may contain
    ///     paths which are not accessible by this API.
    ///     
    ///     The directory separator in WASI is always the forward-slash (`/`).
    ///     
    ///     All paths in WASI are relative paths, and are interpreted relative to a
    ///     `descriptor` referring to a base directory. If a `path` argument to any WASI
    ///     function starts with `/`, or if any step of resolving a `path`, including
    ///     `..` and symbolic link steps, reaches a directory outside of the base
    ///     directory, or reaches a symlink to an absolute or rooted path in the
    ///     underlying filesystem, the function fails with `error-code::not-permitted`.
    ///     
    ///     For more information about WASI path resolution and sandboxing, see
    ///     [WASI filesystem path resolution].
    ///     
    ///     [WASI filesystem path resolution]: https://github.com/WebAssembly/wasi-filesystem/blob/main/path-resolution.md
    /// </summary>
    [global::WaaS.ComponentModel.Binding.ComponentInterface(@"types")]
    public partial interface ITypes
    {
        /// <summary>
        ///     Attempts to extract a filesystem-related `error-code` from the stream
        ///     `error` provided.
        ///     
        ///     Stream operations which return `stream-error::last-operation-failed`
        ///     have a payload with more information about the operation that failed.
        ///     This payload can be passed through to this function to see if there's
        ///     filesystem-related information about the error to return.
        ///     
        ///     Note that this function is fallible because not all stream-related
        ///     errors are filesystem-related errors.
        /// </summary>
        [global::WaaS.ComponentModel.Binding.ComponentApi(@"filesystem-error-code")]
        Wasi.Filesystem.ITypes.ErrorCode? FilesystemErrorCode(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Io.IError.IErrorResource> @err);

        /// <summary>
        ///     File size or length of a region within a file.
        /// </summary>
        [global::WaaS.ComponentModel.Binding.ComponentAlias(typeof(ulong))]
        public readonly partial struct Filesize
        {
            private readonly ulong value;
            private Filesize (ulong value) => this.value = value;
            public static implicit operator Filesize(ulong value) => new (value);
            public static implicit operator ulong(Filesize value) => value.value;
        }

        /// <summary>
        ///     The type of a filesystem object referenced by a descriptor.
        ///     
        ///     Note: This was called `filetype` in earlier versions of WASI.
        /// </summary>
        public enum DescriptorType : uint
        {
            /// <summary>
            ///     The type of the descriptor or file is unknown or is different from
            ///     any of the other types specified.
            /// </summary>
            Unknown,
            /// <summary>
            ///     The descriptor refers to a block device inode.
            /// </summary>
            BlockDevice,
            /// <summary>
            ///     The descriptor refers to a character device inode.
            /// </summary>
            CharacterDevice,
            /// <summary>
            ///     The descriptor refers to a directory inode.
            /// </summary>
            Directory,
            /// <summary>
            ///     The descriptor refers to a named pipe.
            /// </summary>
            Fifo,
            /// <summary>
            ///     The file refers to a symbolic link inode.
            /// </summary>
            SymbolicLink,
            /// <summary>
            ///     The descriptor refers to a regular file inode.
            /// </summary>
            RegularFile,
            /// <summary>
            ///     The descriptor refers to a socket.
            /// </summary>
            Socket,
        }

        /// <summary>
        ///     Descriptor flags.
        ///     
        ///     Note: This was called `fdflags` in earlier versions of WASI.
        /// </summary>
        [global::System.Flags]
        public enum DescriptorFlags : byte
        {
            /// <summary>
            ///     Read mode: Data can be read.
            /// </summary>
            Read = 1 << 0,
            /// <summary>
            ///     Write mode: Data can be written to.
            /// </summary>
            Write = 1 << 1,
            /// <summary>
            ///     Request that writes be performed according to synchronized I/O file
            ///     integrity completion. The data stored in the file and the file's
            ///     metadata are synchronized. This is similar to `O_SYNC` in POSIX.
            ///     
            ///     The precise semantics of this operation have not yet been defined for
            ///     WASI. At this time, it should be interpreted as a request, and not a
            ///     requirement.
            /// </summary>
            FileIntegritySync = 1 << 2,
            /// <summary>
            ///     Request that writes be performed according to synchronized I/O data
            ///     integrity completion. Only the data stored in the file is
            ///     synchronized. This is similar to `O_DSYNC` in POSIX.
            ///     
            ///     The precise semantics of this operation have not yet been defined for
            ///     WASI. At this time, it should be interpreted as a request, and not a
            ///     requirement.
            /// </summary>
            DataIntegritySync = 1 << 3,
            /// <summary>
            ///     Requests that reads be performed at the same level of integrity
            ///     requested for writes. This is similar to `O_RSYNC` in POSIX.
            ///     
            ///     The precise semantics of this operation have not yet been defined for
            ///     WASI. At this time, it should be interpreted as a request, and not a
            ///     requirement.
            /// </summary>
            RequestedWriteSync = 1 << 4,
            /// <summary>
            ///     Mutating directories mode: Directory contents may be mutated.
            ///     
            ///     When this flag is unset on a descriptor, operations using the
            ///     descriptor which would create, rename, delete, modify the data or
            ///     metadata of filesystem objects, or obtain another handle which
            ///     would permit any of those, shall fail with `error-code::read-only` if
            ///     they would otherwise succeed.
            ///     
            ///     This may only be set on directories.
            /// </summary>
            MutateDirectory = 1 << 5,
        }

        /// <summary>
        ///     Flags determining the method of how paths are resolved.
        /// </summary>
        [global::System.Flags]
        public enum PathFlags : byte
        {
            /// <summary>
            ///     As long as the resolved path corresponds to a symbolic link, it is
            ///     expanded.
            /// </summary>
            SymlinkFollow = 1 << 0,
        }

        /// <summary>
        ///     Open flags used by `open-at`.
        /// </summary>
        [global::System.Flags]
        public enum OpenFlags : byte
        {
            /// <summary>
            ///     Create file if it does not exist, similar to `O_CREAT` in POSIX.
            /// </summary>
            Create = 1 << 0,
            /// <summary>
            ///     Fail if not a directory, similar to `O_DIRECTORY` in POSIX.
            /// </summary>
            Directory = 1 << 1,
            /// <summary>
            ///     Fail if file already exists, similar to `O_EXCL` in POSIX.
            /// </summary>
            Exclusive = 1 << 2,
            /// <summary>
            ///     Truncate file to size 0, similar to `O_TRUNC` in POSIX.
            /// </summary>
            Truncate = 1 << 3,
        }

        /// <summary>
        ///     Number of hard links to an inode.
        /// </summary>
        [global::WaaS.ComponentModel.Binding.ComponentAlias(typeof(ulong))]
        public readonly partial struct LinkCount
        {
            private readonly ulong value;
            private LinkCount (ulong value) => this.value = value;
            public static implicit operator LinkCount(ulong value) => new (value);
            public static implicit operator ulong(LinkCount value) => value.value;
        }

        /// <summary>
        ///     File attributes.
        ///     
        ///     Note: This was called `filestat` in earlier versions of WASI.
        /// </summary>
        [global::WaaS.ComponentModel.Binding.ComponentRecord]
        public readonly partial struct DescriptorStat
        {
            /// <summary>
            ///     File type.
            /// </summary>
            public Wasi.Filesystem.ITypes.DescriptorType Type { get; init; }
            /// <summary>
            ///     Number of hard links to the file.
            /// </summary>
            public Wasi.Filesystem.ITypes.LinkCount LinkCount { get; init; }
            /// <summary>
            ///     For regular files, the file size in bytes. For symbolic links, the
            ///     length in bytes of the pathname contained in the symbolic link.
            /// </summary>
            public Wasi.Filesystem.ITypes.Filesize Size { get; init; }
            /// <summary>
            ///     Last data access timestamp.
            ///     
            ///     If the `option` is none, the platform doesn't maintain an access
            ///     timestamp for this file.
            /// </summary>
            public Wasi.Clocks.IWallClock.Datetime? DataAccessTimestamp { get; init; }
            /// <summary>
            ///     Last data modification timestamp.
            ///     
            ///     If the `option` is none, the platform doesn't maintain a
            ///     modification timestamp for this file.
            /// </summary>
            public Wasi.Clocks.IWallClock.Datetime? DataModificationTimestamp { get; init; }
            /// <summary>
            ///     Last file status-change timestamp.
            ///     
            ///     If the `option` is none, the platform doesn't maintain a
            ///     status-change timestamp for this file.
            /// </summary>
            public Wasi.Clocks.IWallClock.Datetime? StatusChangeTimestamp { get; init; }
        }

        /// <summary>
        ///     When setting a timestamp, this gives the value to set it to.
        /// </summary>
        [global::WaaS.ComponentModel.Binding.ComponentVariant]
        public readonly partial struct NewTimestamp
        {
            /// <summary>
            ///     Leave the timestamp set to its previous value.
            /// </summary>
            public global::WaaS.ComponentModel.Binding.None? NoChange { get; init; }
            /// <summary>
            ///     Set the timestamp to the current time of the system clock associated
            ///     with the filesystem.
            /// </summary>
            public global::WaaS.ComponentModel.Binding.None? Now { get; init; }
            /// <summary>
            ///     Set the timestamp to the given value.
            /// </summary>
            public Wasi.Clocks.IWallClock.Datetime? Timestamp { get; init; }
        }

        /// <summary>
        ///     A directory entry.
        /// </summary>
        [global::WaaS.ComponentModel.Binding.ComponentRecord]
        public readonly partial struct DirectoryEntry
        {
            /// <summary>
            ///     The type of the file referred to by this directory entry.
            /// </summary>
            public Wasi.Filesystem.ITypes.DescriptorType Type { get; init; }
            /// <summary>
            ///     The name of the object.
            /// </summary>
            public string Name { get; init; }
        }

        /// <summary>
        ///     Error codes returned by functions, similar to `errno` in POSIX.
        ///     Not all of these error codes are returned by the functions provided by this
        ///     API; some are used in higher-level library layers, and others are provided
        ///     merely for alignment with POSIX.
        /// </summary>
        public enum ErrorCode : uint
        {
            /// <summary>
            ///     Permission denied, similar to `EACCES` in POSIX.
            /// </summary>
            Access,
            /// <summary>
            ///     Resource unavailable, or operation would block, similar to `EAGAIN` and `EWOULDBLOCK` in POSIX.
            /// </summary>
            WouldBlock,
            /// <summary>
            ///     Connection already in progress, similar to `EALREADY` in POSIX.
            /// </summary>
            Already,
            /// <summary>
            ///     Bad descriptor, similar to `EBADF` in POSIX.
            /// </summary>
            BadDescriptor,
            /// <summary>
            ///     Device or resource busy, similar to `EBUSY` in POSIX.
            /// </summary>
            Busy,
            /// <summary>
            ///     Resource deadlock would occur, similar to `EDEADLK` in POSIX.
            /// </summary>
            Deadlock,
            /// <summary>
            ///     Storage quota exceeded, similar to `EDQUOT` in POSIX.
            /// </summary>
            Quota,
            /// <summary>
            ///     File exists, similar to `EEXIST` in POSIX.
            /// </summary>
            Exist,
            /// <summary>
            ///     File too large, similar to `EFBIG` in POSIX.
            /// </summary>
            FileTooLarge,
            /// <summary>
            ///     Illegal byte sequence, similar to `EILSEQ` in POSIX.
            /// </summary>
            IllegalByteSequence,
            /// <summary>
            ///     Operation in progress, similar to `EINPROGRESS` in POSIX.
            /// </summary>
            InProgress,
            /// <summary>
            ///     Interrupted function, similar to `EINTR` in POSIX.
            /// </summary>
            Interrupted,
            /// <summary>
            ///     Invalid argument, similar to `EINVAL` in POSIX.
            /// </summary>
            Invalid,
            /// <summary>
            ///     I/O error, similar to `EIO` in POSIX.
            /// </summary>
            Io,
            /// <summary>
            ///     Is a directory, similar to `EISDIR` in POSIX.
            /// </summary>
            IsDirectory,
            /// <summary>
            ///     Too many levels of symbolic links, similar to `ELOOP` in POSIX.
            /// </summary>
            Loop,
            /// <summary>
            ///     Too many links, similar to `EMLINK` in POSIX.
            /// </summary>
            TooManyLinks,
            /// <summary>
            ///     Message too large, similar to `EMSGSIZE` in POSIX.
            /// </summary>
            MessageSize,
            /// <summary>
            ///     Filename too long, similar to `ENAMETOOLONG` in POSIX.
            /// </summary>
            NameTooLong,
            /// <summary>
            ///     No such device, similar to `ENODEV` in POSIX.
            /// </summary>
            NoDevice,
            /// <summary>
            ///     No such file or directory, similar to `ENOENT` in POSIX.
            /// </summary>
            NoEntry,
            /// <summary>
            ///     No locks available, similar to `ENOLCK` in POSIX.
            /// </summary>
            NoLock,
            /// <summary>
            ///     Not enough space, similar to `ENOMEM` in POSIX.
            /// </summary>
            InsufficientMemory,
            /// <summary>
            ///     No space left on device, similar to `ENOSPC` in POSIX.
            /// </summary>
            InsufficientSpace,
            /// <summary>
            ///     Not a directory or a symbolic link to a directory, similar to `ENOTDIR` in POSIX.
            /// </summary>
            NotDirectory,
            /// <summary>
            ///     Directory not empty, similar to `ENOTEMPTY` in POSIX.
            /// </summary>
            NotEmpty,
            /// <summary>
            ///     State not recoverable, similar to `ENOTRECOVERABLE` in POSIX.
            /// </summary>
            NotRecoverable,
            /// <summary>
            ///     Not supported, similar to `ENOTSUP` and `ENOSYS` in POSIX.
            /// </summary>
            Unsupported,
            /// <summary>
            ///     Inappropriate I/O control operation, similar to `ENOTTY` in POSIX.
            /// </summary>
            NoTty,
            /// <summary>
            ///     No such device or address, similar to `ENXIO` in POSIX.
            /// </summary>
            NoSuchDevice,
            /// <summary>
            ///     Value too large to be stored in data type, similar to `EOVERFLOW` in POSIX.
            /// </summary>
            Overflow,
            /// <summary>
            ///     Operation not permitted, similar to `EPERM` in POSIX.
            /// </summary>
            NotPermitted,
            /// <summary>
            ///     Broken pipe, similar to `EPIPE` in POSIX.
            /// </summary>
            Pipe,
            /// <summary>
            ///     Read-only file system, similar to `EROFS` in POSIX.
            /// </summary>
            ReadOnly,
            /// <summary>
            ///     Invalid seek, similar to `ESPIPE` in POSIX.
            /// </summary>
            InvalidSeek,
            /// <summary>
            ///     Text file busy, similar to `ETXTBSY` in POSIX.
            /// </summary>
            TextFileBusy,
            /// <summary>
            ///     Cross-device link, similar to `EXDEV` in POSIX.
            /// </summary>
            CrossDevice,
        }

        /// <summary>
        ///     File or memory access pattern advisory information.
        /// </summary>
        public enum Advice : uint
        {
            /// <summary>
            ///     The application has no advice to give on its behavior with respect
            ///     to the specified data.
            /// </summary>
            Normal,
            /// <summary>
            ///     The application expects to access the specified data sequentially
            ///     from lower offsets to higher offsets.
            /// </summary>
            Sequential,
            /// <summary>
            ///     The application expects to access the specified data in a random
            ///     order.
            /// </summary>
            Random,
            /// <summary>
            ///     The application expects to access the specified data in the near
            ///     future.
            /// </summary>
            WillNeed,
            /// <summary>
            ///     The application expects that it will not access the specified data
            ///     in the near future.
            /// </summary>
            DontNeed,
            /// <summary>
            ///     The application expects to access the specified data once and then
            ///     not reuse it thereafter.
            /// </summary>
            NoReuse,
        }

        /// <summary>
        ///     A 128-bit hash value, split into parts because wasm doesn't have a
        ///     128-bit integer type.
        /// </summary>
        [global::WaaS.ComponentModel.Binding.ComponentRecord]
        public readonly partial struct MetadataHashValue
        {
            /// <summary>
            ///     64 bits of a 128-bit hash value.
            /// </summary>
            public ulong Lower { get; init; }
            /// <summary>
            ///     Another 64 bits of a 128-bit hash value.
            /// </summary>
            public ulong Upper { get; init; }
        }

        /// <summary>
        ///     A descriptor is a reference to a filesystem object, which may be a file,
        ///     directory, named pipe, special file, or other object on which filesystem
        ///     calls may be made.
        /// </summary>
        public partial interface IDescriptorResource : global::WaaS.ComponentModel.Runtime.IResourceType
        {
            /// <summary>
            ///     Return a stream for reading from a file, if available.
            ///     
            ///     May fail with an error-code describing why the file cannot be read.
            ///     
            ///     Multiple read, write, and append streams may be active on the same open
            ///     file and they do not interfere with each other.
            ///     
            ///     Note: This allows using `read-stream`, which is similar to `read` in POSIX.
            /// </summary>
            [global::WaaS.ComponentModel.Binding.ComponentApi(@"[method]descriptor.read-via-stream")]
            global::WaaS.ComponentModel.Binding.Result<global::WaaS.ComponentModel.Runtime.Owned<Wasi.Io.IStreams.IInputStreamResource>, Wasi.Filesystem.ITypes.ErrorCode> ReadViaStream(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Filesystem.ITypes.IDescriptorResource> @self, Wasi.Filesystem.ITypes.Filesize @offset);

            /// <summary>
            ///     Return a stream for writing to a file, if available.
            ///     
            ///     May fail with an error-code describing why the file cannot be written.
            ///     
            ///     Note: This allows using `write-stream`, which is similar to `write` in
            ///     POSIX.
            /// </summary>
            [global::WaaS.ComponentModel.Binding.ComponentApi(@"[method]descriptor.write-via-stream")]
            global::WaaS.ComponentModel.Binding.Result<global::WaaS.ComponentModel.Runtime.Owned<Wasi.Io.IStreams.IOutputStreamResource>, Wasi.Filesystem.ITypes.ErrorCode> WriteViaStream(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Filesystem.ITypes.IDescriptorResource> @self, Wasi.Filesystem.ITypes.Filesize @offset);

            /// <summary>
            ///     Return a stream for appending to a file, if available.
            ///     
            ///     May fail with an error-code describing why the file cannot be appended.
            ///     
            ///     Note: This allows using `write-stream`, which is similar to `write` with
            ///     `O_APPEND` in in POSIX.
            /// </summary>
            [global::WaaS.ComponentModel.Binding.ComponentApi(@"[method]descriptor.append-via-stream")]
            global::WaaS.ComponentModel.Binding.Result<global::WaaS.ComponentModel.Runtime.Owned<Wasi.Io.IStreams.IOutputStreamResource>, Wasi.Filesystem.ITypes.ErrorCode> AppendViaStream(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Filesystem.ITypes.IDescriptorResource> @self);

            /// <summary>
            ///     Provide file advisory information on a descriptor.
            ///     
            ///     This is similar to `posix_fadvise` in POSIX.
            /// </summary>
            [global::WaaS.ComponentModel.Binding.ComponentApi(@"[method]descriptor.advise")]
            global::WaaS.ComponentModel.Binding.Result<global::WaaS.ComponentModel.Binding.None, Wasi.Filesystem.ITypes.ErrorCode> Advise(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Filesystem.ITypes.IDescriptorResource> @self, Wasi.Filesystem.ITypes.Filesize @offset, Wasi.Filesystem.ITypes.Filesize @length, Wasi.Filesystem.ITypes.Advice @advice);

            /// <summary>
            ///     Synchronize the data of a file to disk.
            ///     
            ///     This function succeeds with no effect if the file descriptor is not
            ///     opened for writing.
            ///     
            ///     Note: This is similar to `fdatasync` in POSIX.
            /// </summary>
            [global::WaaS.ComponentModel.Binding.ComponentApi(@"[method]descriptor.sync-data")]
            global::WaaS.ComponentModel.Binding.Result<global::WaaS.ComponentModel.Binding.None, Wasi.Filesystem.ITypes.ErrorCode> SyncData(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Filesystem.ITypes.IDescriptorResource> @self);

            /// <summary>
            ///     Get flags associated with a descriptor.
            ///     
            ///     Note: This returns similar flags to `fcntl(fd, F_GETFL)` in POSIX.
            ///     
            ///     Note: This returns the value that was the `fs_flags` value returned
            ///     from `fdstat_get` in earlier versions of WASI.
            /// </summary>
            [global::WaaS.ComponentModel.Binding.ComponentApi(@"[method]descriptor.get-flags")]
            global::WaaS.ComponentModel.Binding.Result<Wasi.Filesystem.ITypes.DescriptorFlags, Wasi.Filesystem.ITypes.ErrorCode> GetFlags(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Filesystem.ITypes.IDescriptorResource> @self);

            /// <summary>
            ///     Get the dynamic type of a descriptor.
            ///     
            ///     Note: This returns the same value as the `type` field of the `fd-stat`
            ///     returned by `stat`, `stat-at` and similar.
            ///     
            ///     Note: This returns similar flags to the `st_mode & S_IFMT` value provided
            ///     by `fstat` in POSIX.
            ///     
            ///     Note: This returns the value that was the `fs_filetype` value returned
            ///     from `fdstat_get` in earlier versions of WASI.
            /// </summary>
            [global::WaaS.ComponentModel.Binding.ComponentApi(@"[method]descriptor.get-type")]
            global::WaaS.ComponentModel.Binding.Result<Wasi.Filesystem.ITypes.DescriptorType, Wasi.Filesystem.ITypes.ErrorCode> GetType(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Filesystem.ITypes.IDescriptorResource> @self);

            /// <summary>
            ///     Adjust the size of an open file. If this increases the file's size, the
            ///     extra bytes are filled with zeros.
            ///     
            ///     Note: This was called `fd_filestat_set_size` in earlier versions of WASI.
            /// </summary>
            [global::WaaS.ComponentModel.Binding.ComponentApi(@"[method]descriptor.set-size")]
            global::WaaS.ComponentModel.Binding.Result<global::WaaS.ComponentModel.Binding.None, Wasi.Filesystem.ITypes.ErrorCode> SetSize(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Filesystem.ITypes.IDescriptorResource> @self, Wasi.Filesystem.ITypes.Filesize @size);

            /// <summary>
            ///     Adjust the timestamps of an open file or directory.
            ///     
            ///     Note: This is similar to `futimens` in POSIX.
            ///     
            ///     Note: This was called `fd_filestat_set_times` in earlier versions of WASI.
            /// </summary>
            [global::WaaS.ComponentModel.Binding.ComponentApi(@"[method]descriptor.set-times")]
            global::WaaS.ComponentModel.Binding.Result<global::WaaS.ComponentModel.Binding.None, Wasi.Filesystem.ITypes.ErrorCode> SetTimes(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Filesystem.ITypes.IDescriptorResource> @self, Wasi.Filesystem.ITypes.NewTimestamp @dataAccessTimestamp, Wasi.Filesystem.ITypes.NewTimestamp @dataModificationTimestamp);

            /// <summary>
            ///     Read from a descriptor, without using and updating the descriptor's offset.
            ///     
            ///     This function returns a list of bytes containing the data that was
            ///     read, along with a bool which, when true, indicates that the end of the
            ///     file was reached. The returned list will contain up to `length` bytes; it
            ///     may return fewer than requested, if the end of the file is reached or
            ///     if the I/O operation is interrupted.
            ///     
            ///     In the future, this may change to return a `stream<u8, error-code>`.
            ///     
            ///     Note: This is similar to `pread` in POSIX.
            /// </summary>
            [global::WaaS.ComponentModel.Binding.ComponentApi(@"[method]descriptor.read")]
            global::WaaS.ComponentModel.Binding.Result<(global::System.ReadOnlyMemory<byte>, bool), Wasi.Filesystem.ITypes.ErrorCode> Read(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Filesystem.ITypes.IDescriptorResource> @self, Wasi.Filesystem.ITypes.Filesize @length, Wasi.Filesystem.ITypes.Filesize @offset);

            /// <summary>
            ///     Write to a descriptor, without using and updating the descriptor's offset.
            ///     
            ///     It is valid to write past the end of a file; the file is extended to the
            ///     extent of the write, with bytes between the previous end and the start of
            ///     the write set to zero.
            ///     
            ///     In the future, this may change to take a `stream<u8, error-code>`.
            ///     
            ///     Note: This is similar to `pwrite` in POSIX.
            /// </summary>
            [global::WaaS.ComponentModel.Binding.ComponentApi(@"[method]descriptor.write")]
            global::WaaS.ComponentModel.Binding.Result<Wasi.Filesystem.ITypes.Filesize, Wasi.Filesystem.ITypes.ErrorCode> Write(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Filesystem.ITypes.IDescriptorResource> @self, global::System.ReadOnlyMemory<byte> @buffer, Wasi.Filesystem.ITypes.Filesize @offset);

            /// <summary>
            ///     Read directory entries from a directory.
            ///     
            ///     On filesystems where directories contain entries referring to themselves
            ///     and their parents, often named `.` and `..` respectively, these entries
            ///     are omitted.
            ///     
            ///     This always returns a new stream which starts at the beginning of the
            ///     directory. Multiple streams may be active on the same directory, and they
            ///     do not interfere with each other.
            /// </summary>
            [global::WaaS.ComponentModel.Binding.ComponentApi(@"[method]descriptor.read-directory")]
            global::WaaS.ComponentModel.Binding.Result<global::WaaS.ComponentModel.Runtime.Owned<Wasi.Filesystem.ITypes.IDirectoryEntryStreamResource>, Wasi.Filesystem.ITypes.ErrorCode> ReadDirectory(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Filesystem.ITypes.IDescriptorResource> @self);

            /// <summary>
            ///     Synchronize the data and metadata of a file to disk.
            ///     
            ///     This function succeeds with no effect if the file descriptor is not
            ///     opened for writing.
            ///     
            ///     Note: This is similar to `fsync` in POSIX.
            /// </summary>
            [global::WaaS.ComponentModel.Binding.ComponentApi(@"[method]descriptor.sync")]
            global::WaaS.ComponentModel.Binding.Result<global::WaaS.ComponentModel.Binding.None, Wasi.Filesystem.ITypes.ErrorCode> Sync(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Filesystem.ITypes.IDescriptorResource> @self);

            /// <summary>
            ///     Create a directory.
            ///     
            ///     Note: This is similar to `mkdirat` in POSIX.
            /// </summary>
            [global::WaaS.ComponentModel.Binding.ComponentApi(@"[method]descriptor.create-directory-at")]
            global::WaaS.ComponentModel.Binding.Result<global::WaaS.ComponentModel.Binding.None, Wasi.Filesystem.ITypes.ErrorCode> CreateDirectoryAt(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Filesystem.ITypes.IDescriptorResource> @self, string @path);

            /// <summary>
            ///     Return the attributes of an open file or directory.
            ///     
            ///     Note: This is similar to `fstat` in POSIX, except that it does not return
            ///     device and inode information. For testing whether two descriptors refer to
            ///     the same underlying filesystem object, use `is-same-object`. To obtain
            ///     additional data that can be used do determine whether a file has been
            ///     modified, use `metadata-hash`.
            ///     
            ///     Note: This was called `fd_filestat_get` in earlier versions of WASI.
            /// </summary>
            [global::WaaS.ComponentModel.Binding.ComponentApi(@"[method]descriptor.stat")]
            global::WaaS.ComponentModel.Binding.Result<Wasi.Filesystem.ITypes.DescriptorStat, Wasi.Filesystem.ITypes.ErrorCode> Stat(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Filesystem.ITypes.IDescriptorResource> @self);

            /// <summary>
            ///     Return the attributes of a file or directory.
            ///     
            ///     Note: This is similar to `fstatat` in POSIX, except that it does not
            ///     return device and inode information. See the `stat` description for a
            ///     discussion of alternatives.
            ///     
            ///     Note: This was called `path_filestat_get` in earlier versions of WASI.
            /// </summary>
            [global::WaaS.ComponentModel.Binding.ComponentApi(@"[method]descriptor.stat-at")]
            global::WaaS.ComponentModel.Binding.Result<Wasi.Filesystem.ITypes.DescriptorStat, Wasi.Filesystem.ITypes.ErrorCode> StatAt(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Filesystem.ITypes.IDescriptorResource> @self, Wasi.Filesystem.ITypes.PathFlags @pathFlags, string @path);

            /// <summary>
            ///     Adjust the timestamps of a file or directory.
            ///     
            ///     Note: This is similar to `utimensat` in POSIX.
            ///     
            ///     Note: This was called `path_filestat_set_times` in earlier versions of
            ///     WASI.
            /// </summary>
            [global::WaaS.ComponentModel.Binding.ComponentApi(@"[method]descriptor.set-times-at")]
            global::WaaS.ComponentModel.Binding.Result<global::WaaS.ComponentModel.Binding.None, Wasi.Filesystem.ITypes.ErrorCode> SetTimesAt(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Filesystem.ITypes.IDescriptorResource> @self, Wasi.Filesystem.ITypes.PathFlags @pathFlags, string @path, Wasi.Filesystem.ITypes.NewTimestamp @dataAccessTimestamp, Wasi.Filesystem.ITypes.NewTimestamp @dataModificationTimestamp);

            /// <summary>
            ///     Create a hard link.
            ///     
            ///     Note: This is similar to `linkat` in POSIX.
            /// </summary>
            [global::WaaS.ComponentModel.Binding.ComponentApi(@"[method]descriptor.link-at")]
            global::WaaS.ComponentModel.Binding.Result<global::WaaS.ComponentModel.Binding.None, Wasi.Filesystem.ITypes.ErrorCode> LinkAt(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Filesystem.ITypes.IDescriptorResource> @self, Wasi.Filesystem.ITypes.PathFlags @oldPathFlags, string @oldPath, global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Filesystem.ITypes.IDescriptorResource> @newDescriptor, string @newPath);

            /// <summary>
            ///     Open a file or directory.
            ///     
            ///     If `flags` contains `descriptor-flags::mutate-directory`, and the base
            ///     descriptor doesn't have `descriptor-flags::mutate-directory` set,
            ///     `open-at` fails with `error-code::read-only`.
            ///     
            ///     If `flags` contains `write` or `mutate-directory`, or `open-flags`
            ///     contains `truncate` or `create`, and the base descriptor doesn't have
            ///     `descriptor-flags::mutate-directory` set, `open-at` fails with
            ///     `error-code::read-only`.
            ///     
            ///     Note: This is similar to `openat` in POSIX.
            /// </summary>
            [global::WaaS.ComponentModel.Binding.ComponentApi(@"[method]descriptor.open-at")]
            global::WaaS.ComponentModel.Binding.Result<global::WaaS.ComponentModel.Runtime.Owned<Wasi.Filesystem.ITypes.IDescriptorResource>, Wasi.Filesystem.ITypes.ErrorCode> OpenAt(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Filesystem.ITypes.IDescriptorResource> @self, Wasi.Filesystem.ITypes.PathFlags @pathFlags, string @path, Wasi.Filesystem.ITypes.OpenFlags @openFlags, Wasi.Filesystem.ITypes.DescriptorFlags @flags);

            /// <summary>
            ///     Read the contents of a symbolic link.
            ///     
            ///     If the contents contain an absolute or rooted path in the underlying
            ///     filesystem, this function fails with `error-code::not-permitted`.
            ///     
            ///     Note: This is similar to `readlinkat` in POSIX.
            /// </summary>
            [global::WaaS.ComponentModel.Binding.ComponentApi(@"[method]descriptor.readlink-at")]
            global::WaaS.ComponentModel.Binding.Result<string, Wasi.Filesystem.ITypes.ErrorCode> ReadlinkAt(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Filesystem.ITypes.IDescriptorResource> @self, string @path);

            /// <summary>
            ///     Remove a directory.
            ///     
            ///     Return `error-code::not-empty` if the directory is not empty.
            ///     
            ///     Note: This is similar to `unlinkat(fd, path, AT_REMOVEDIR)` in POSIX.
            /// </summary>
            [global::WaaS.ComponentModel.Binding.ComponentApi(@"[method]descriptor.remove-directory-at")]
            global::WaaS.ComponentModel.Binding.Result<global::WaaS.ComponentModel.Binding.None, Wasi.Filesystem.ITypes.ErrorCode> RemoveDirectoryAt(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Filesystem.ITypes.IDescriptorResource> @self, string @path);

            /// <summary>
            ///     Rename a filesystem object.
            ///     
            ///     Note: This is similar to `renameat` in POSIX.
            /// </summary>
            [global::WaaS.ComponentModel.Binding.ComponentApi(@"[method]descriptor.rename-at")]
            global::WaaS.ComponentModel.Binding.Result<global::WaaS.ComponentModel.Binding.None, Wasi.Filesystem.ITypes.ErrorCode> RenameAt(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Filesystem.ITypes.IDescriptorResource> @self, string @oldPath, global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Filesystem.ITypes.IDescriptorResource> @newDescriptor, string @newPath);

            /// <summary>
            ///     Create a symbolic link (also known as a "symlink").
            ///     
            ///     If `old-path` starts with `/`, the function fails with
            ///     `error-code::not-permitted`.
            ///     
            ///     Note: This is similar to `symlinkat` in POSIX.
            /// </summary>
            [global::WaaS.ComponentModel.Binding.ComponentApi(@"[method]descriptor.symlink-at")]
            global::WaaS.ComponentModel.Binding.Result<global::WaaS.ComponentModel.Binding.None, Wasi.Filesystem.ITypes.ErrorCode> SymlinkAt(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Filesystem.ITypes.IDescriptorResource> @self, string @oldPath, string @newPath);

            /// <summary>
            ///     Unlink a filesystem object that is not a directory.
            ///     
            ///     Return `error-code::is-directory` if the path refers to a directory.
            ///     Note: This is similar to `unlinkat(fd, path, 0)` in POSIX.
            /// </summary>
            [global::WaaS.ComponentModel.Binding.ComponentApi(@"[method]descriptor.unlink-file-at")]
            global::WaaS.ComponentModel.Binding.Result<global::WaaS.ComponentModel.Binding.None, Wasi.Filesystem.ITypes.ErrorCode> UnlinkFileAt(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Filesystem.ITypes.IDescriptorResource> @self, string @path);

            /// <summary>
            ///     Test whether two descriptors refer to the same filesystem object.
            ///     
            ///     In POSIX, this corresponds to testing whether the two descriptors have the
            ///     same device (`st_dev`) and inode (`st_ino` or `d_ino`) numbers.
            ///     wasi-filesystem does not expose device and inode numbers, so this function
            ///     may be used instead.
            /// </summary>
            [global::WaaS.ComponentModel.Binding.ComponentApi(@"[method]descriptor.is-same-object")]
            bool IsSameObject(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Filesystem.ITypes.IDescriptorResource> @self, global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Filesystem.ITypes.IDescriptorResource> @other);

            /// <summary>
            ///     Return a hash of the metadata associated with a filesystem object referred
            ///     to by a descriptor.
            ///     
            ///     This returns a hash of the last-modification timestamp and file size, and
            ///     may also include the inode number, device number, birth timestamp, and
            ///     other metadata fields that may change when the file is modified or
            ///     replaced. It may also include a secret value chosen by the
            ///     implementation and not otherwise exposed.
            ///     
            ///     Implementations are encourated to provide the following properties:
            ///     
            ///     - If the file is not modified or replaced, the computed hash value should
            ///     usually not change.
            ///     - If the object is modified or replaced, the computed hash value should
            ///     usually change.
            ///     - The inputs to the hash should not be easily computable from the
            ///     computed hash.
            ///     
            ///     However, none of these is required.
            /// </summary>
            [global::WaaS.ComponentModel.Binding.ComponentApi(@"[method]descriptor.metadata-hash")]
            global::WaaS.ComponentModel.Binding.Result<Wasi.Filesystem.ITypes.MetadataHashValue, Wasi.Filesystem.ITypes.ErrorCode> MetadataHash(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Filesystem.ITypes.IDescriptorResource> @self);

            /// <summary>
            ///     Return a hash of the metadata associated with a filesystem object referred
            ///     to by a directory descriptor and a relative path.
            ///     
            ///     This performs the same hash computation as `metadata-hash`.
            /// </summary>
            [global::WaaS.ComponentModel.Binding.ComponentApi(@"[method]descriptor.metadata-hash-at")]
            global::WaaS.ComponentModel.Binding.Result<Wasi.Filesystem.ITypes.MetadataHashValue, Wasi.Filesystem.ITypes.ErrorCode> MetadataHashAt(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Filesystem.ITypes.IDescriptorResource> @self, Wasi.Filesystem.ITypes.PathFlags @pathFlags, string @path);

        }

        /// <summary>
        ///     A stream of directory entries.
        /// </summary>
        public partial interface IDirectoryEntryStreamResource : global::WaaS.ComponentModel.Runtime.IResourceType
        {
            /// <summary>
            ///     Read a single directory entry from a `directory-entry-stream`.
            /// </summary>
            [global::WaaS.ComponentModel.Binding.ComponentApi(@"[method]directory-entry-stream.read-directory-entry")]
            global::WaaS.ComponentModel.Binding.Result<Wasi.Filesystem.ITypes.DirectoryEntry?, Wasi.Filesystem.ITypes.ErrorCode> ReadDirectoryEntry(global::WaaS.ComponentModel.Runtime.Borrowed<Wasi.Filesystem.ITypes.IDirectoryEntryStreamResource> @self);

        }

    }
}
