// <auto-generated />
#nullable enable

namespace Wasi.Clocks
{
    // interface monotonic-clock
    /// <summary>
    ///     WASI Monotonic Clock is a clock API intended to let users measure elapsed
    ///     time.
    ///     
    ///     It is intended to be portable at least between Unix-family platforms and
    ///     Windows.
    ///     
    ///     A monotonic clock is a clock which has an unspecified initial value, and
    ///     successive reads of the clock will produce non-decreasing values.
    /// </summary>
    [global::WaaS.ComponentModel.Binding.ComponentInterface(@"monotonic-clock")]
    public partial interface IMonotonicClock
    {
        /// <summary>
        ///     Read the current value of the clock.
        ///     
        ///     The clock is monotonic, therefore calling this function repeatedly will
        ///     produce a sequence of non-decreasing values.
        /// </summary>
        [global::WaaS.ComponentModel.Binding.ComponentApi(@"now")]
        global::System.Threading.Tasks.ValueTask<Wasi.Clocks.IMonotonicClock.Instant> Now();

        /// <summary>
        ///     Query the resolution of the clock. Returns the duration of time
        ///     corresponding to a clock tick.
        /// </summary>
        [global::WaaS.ComponentModel.Binding.ComponentApi(@"resolution")]
        global::System.Threading.Tasks.ValueTask<Wasi.Clocks.IMonotonicClock.Duration> Resolution();

        /// <summary>
        ///     Create a `pollable` which will resolve once the specified instant
        ///     has occurred.
        /// </summary>
        [global::WaaS.ComponentModel.Binding.ComponentApi(@"subscribe-instant")]
        global::System.Threading.Tasks.ValueTask<global::WaaS.ComponentModel.Binding.Owned<Wasi.Io.IPoll.IPollableResourceImpl>> SubscribeInstant(Wasi.Clocks.IMonotonicClock.Instant @when);

        /// <summary>
        ///     Create a `pollable` that will resolve after the specified duration has
        ///     elapsed from the time this function is invoked.
        /// </summary>
        [global::WaaS.ComponentModel.Binding.ComponentApi(@"subscribe-duration")]
        global::System.Threading.Tasks.ValueTask<global::WaaS.ComponentModel.Binding.Owned<Wasi.Io.IPoll.IPollableResourceImpl>> SubscribeDuration(Wasi.Clocks.IMonotonicClock.Duration @when);

        /// <summary>
        ///     An instant in time, in nanoseconds. An instant is relative to an
        ///     unspecified initial value, and can only be compared to instances from
        ///     the same monotonic-clock.
        /// </summary>
        [global::WaaS.ComponentModel.Binding.ComponentAlias(typeof(ulong))]
        public readonly partial struct Instant
        {
            private readonly ulong value;
            private Instant (ulong value) => this.value = value;
            public static implicit operator Instant(ulong value) => new (value);
            public static implicit operator ulong(Instant value) => value.value;
        }

        /// <summary>
        ///     A duration of time, in nanoseconds.
        /// </summary>
        [global::WaaS.ComponentModel.Binding.ComponentAlias(typeof(ulong))]
        public readonly partial struct Duration
        {
            private readonly ulong value;
            private Duration (ulong value) => this.value = value;
            public static implicit operator Duration(ulong value) => new (value);
            public static implicit operator ulong(Duration value) => value.value;
        }

    }
}
