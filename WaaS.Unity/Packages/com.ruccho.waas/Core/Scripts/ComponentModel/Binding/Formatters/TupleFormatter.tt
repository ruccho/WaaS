<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>

<#
    string GetItem(int i)
    {
        return i == 8 ? "Rest" : $"Item{i}";
    }

    string GetTypeParam(int i)
    {
        return i == 8 ? "TRest" : $"T{i}";
    }

    string GetTypeParams(int i, bool nullable = false)
    {
        return string.Join(", ", Enumerable.Range(1, i).Select(x => x == 8 ? "TRest" : $"T{x}{(nullable ? "?" : "")}"));
    }
#>

#nullable enable

using System;
using System.Threading.Tasks;
using WaaS.ComponentModel.Runtime;
using WaaS.ComponentModel.Models;

namespace WaaS.ComponentModel.Binding
{

<#
    for (var i = 1; i <= 8; i++)
    {
#>

    public class TupleFormatter<<#= GetTypeParams(i) #>> : IFormatter<Tuple<<#= GetTypeParams(i, true) #>>>
<#
        if (i == 8)
        {
#>
        where TRest : notnull
<#
        }
#>
    {
        public IValueType Type { get; } = new ResolverTupleType(new IValueType[] { <#=
            string.Join(", ",
                Enumerable.Range(1, i).Select(x => $"FormatterProvider.GetFormatter<{GetTypeParam(x)}>().Type")) #> });

        public async ValueTask<Tuple<<#= GetTypeParams(i, true) #>>> PullAsync(Pullable pullable)
        {
            var prelude = await pullable.PullPrimitiveValueAsync<RecordPrelude>();
            return new Tuple<<#= GetTypeParams(i, true) #>>(<#=
            string.Join(", ",
                Enumerable.Range(1, i).Select(x => $"await prelude.BodyPullable.PullValueAsync<{GetTypeParam(x)}>()")) #>);
        }

        public void Push(Tuple<<#= GetTypeParams(i, true) #>> value, ValuePusher pusher)
        {
            using var tuplePusher = pusher.PushRecord();
<#
        for (var j = 1; j <= i; j++)
        {
#>
            FormatterProvider.GetFormatter<<#= GetTypeParam(j) #>>().Push(value.<#= GetItem(j) #>, tuplePusher);
<#
        }
#>
        }
    }

    public class ValueTupleFormatter<<#= GetTypeParams(i) #>> : IFormatter<ValueTuple<<#= GetTypeParams(i, true) #>>>
<#
        if (i == 8)
        {
#>
        where TRest : struct
<#
        }
#>
    {
        public IValueType Type { get; } = new ResolverTupleType(new IValueType[] { <#=
            string.Join(", ",
                Enumerable.Range(1, i).Select(x => $"FormatterProvider.GetFormatter<{GetTypeParam(x)}>().Type")) #> });

        public async ValueTask<ValueTuple<<#= GetTypeParams(i, true) #>>> PullAsync(Pullable pullable)
        {
            var prelude = await pullable.PullPrimitiveValueAsync<RecordPrelude>();
            return new ValueTuple<<#= GetTypeParams(i, true) #>>(<#=
            string.Join(", ",
                Enumerable.Range(1, i).Select(x => $"await prelude.BodyPullable.PullValueAsync<{GetTypeParam(x)}>()")) #>);
        }

        public void Push(ValueTuple<<#= GetTypeParams(i, true) #>> value, ValuePusher pusher)
        {
            using var tuplePusher = pusher.PushRecord();
<#
        for (var j = 1; j <= i; j++)
        {
#>
            FormatterProvider.GetFormatter<<#= GetTypeParam(j) #>>().Push(value.<#= GetItem(j) #>, tuplePusher);
<#
        }
#>
        }
    }

<#
    }
#>
}