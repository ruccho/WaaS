"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[53815],{24477:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"getting-started/component-model","title":"Component Model Tutorial","description":"With the Component Model API of WaaS, you can run components based on the WebAssembly Component Model.","source":"@site/docs/getting-started/component-model.md","sourceDirName":"getting-started","slug":"/getting-started/component-model","permalink":"/WaaS/getting-started/component-model","draft":false,"unlisted":false,"editUrl":"https://github.com/ruccho/WaaS/tree/main/docs/docs/getting-started/component-model.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Component Model Tutorial","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Unity and Rust Tutorial","permalink":"/WaaS/getting-started/unity-rust"},"next":{"title":"Core API","permalink":"/WaaS/core/"}}');var s=t(74848),a=t(28453);const i={title:"Component Model Tutorial",sidebar_position:3},r=void 0,l={},c=[{value:"1. Creating WIT",id:"1-creating-wit",level:3},{value:"2. Guest Language Work",id:"2-guest-language-work",level:3},{value:"3. C# Work",id:"3-c-work",level:3}];function d(e){const n={a:"a",code:"code",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["With the Component Model API of WaaS, you can run components based on the ",(0,s.jsx)(n.a,{href:"https://component-model.bytecodealliance.org/",children:"WebAssembly Component Model"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"While traditional WebAssembly modules were limited to numeric types for arguments and return values, the Component Model allows for more complex data types such as strings, lists, and structures to be exchanged."}),"\n",(0,s.jsx)(n.h3,{id:"1-creating-wit",children:"1. Creating WIT"}),"\n",(0,s.jsxs)(n.p,{children:["In the Component Model, you define types and function signatures in advance using an IDL called ",(0,s.jsx)(n.a,{href:"https://component-model.bytecodealliance.org/design/wit.html",children:(0,s.jsx)(n.strong,{children:"WIT"})})," (WebAssembly Interface Type). The following is an example of a WIT intended for use in a simple conversation scene:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-wit",children:"package my-game:my-sequencer;\n\nworld sequence {\n    import env;\n    export play: func();\n}\n\ninterface env {\n    show-message: func(speaker: string, message: string);\n    show-options: func(options: list<string>) -> u32;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"world"})," defines the set of functions to import and export for this WebAssembly component. ",(0,s.jsx)(n.code,{children:"interface env"})," defines the set of functions to be implemented on the host environment side and imported into the component."]}),"\n",(0,s.jsx)(n.h3,{id:"2-guest-language-work",children:"2. Guest Language Work"}),"\n",(0,s.jsxs)(n.p,{children:["Once you have created the WIT, generate bindings for each guest language from the WIT. Use the tool ",(0,s.jsx)(n.a,{href:"https://github.com/bytecodealliance/wit-bindgen",children:(0,s.jsx)(n.code,{children:"wit-bindgen"})})," for this purpose. Currently, it supports generating bindings for Rust, C, Java, Go, C#, and Moonbit. For Rust, a tool called ",(0,s.jsx)(n.a,{href:"https://github.com/bytecodealliance/cargo-component",children:(0,s.jsx)(n.code,{children:"cargo-component"})})," is available to incorporate code generation from WIT into the build pipeline, so we will use it this time."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"cargo install cargo-component --locked\n"})}),"\n",(0,s.jsx)(n.p,{children:"Create a new Rust workspace."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"cargo component new hello-world --lib\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Place the WIT from earlier in ",(0,s.jsx)(n.code,{children:"wit/world.wit"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The following is an example of a script written using the generated bindings for Rust. It calls the functions defined in ",(0,s.jsx)(n.code,{children:"interface env"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'#[allow(warnings)]\nmod bindings;\n\nuse bindings::my_game::my_sequencer::env::*;\nuse bindings::Guest;\n\nstruct Component;\n\nimpl Guest for Component {\n    fn play() {\n        show_message("Sigmo", "Would you mind bringing me a battery?");\n        match show_options(&["Sure".to_string(), "No".to_string()]) {\n            0 => show_message("Sigmo", "Thank you!"),\n            1 => show_message("Sigmo", "\u2026\u2026"),\n            _ => {}\n        }\n        show_message("Sigmo", "\u2026\u2026");\n    }\n}\n\nbindings::export!(Component with_types_in bindings);\n'})}),"\n",(0,s.jsxs)(n.p,{children:["With ",(0,s.jsx)(n.code,{children:"cargo-component"}),", the following command generates bindings from WIT and creates the component:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"cargo component build --release --target wasm32-unknown-unknown\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The result will be output to ",(0,s.jsx)(n.code,{children:"target/wasm32-unknown-unknown/release/hello_world.wasm"}),". Import this into your Unity project."]}),"\n",(0,s.jsx)(n.h3,{id:"3-c-work",children:"3. C# Work"}),"\n",(0,s.jsxs)(n.p,{children:["Now, before you can actually run the component, you need to implement ",(0,s.jsx)(n.code,{children:"show-message"})," and ",(0,s.jsx)(n.code,{children:"show-options"})," on the C# side. To do this, you first need to convert the WIT to C# interfaces using the ",(0,s.jsx)(n.code,{children:"wit2waas"})," tool provided by WaaS. This will generate the following C# code from the WIT above:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'// <auto-generated />\n#nullable enable\n\nnamespace MyGame.MySequencer\n{\n    [global::WaaS.ComponentModel.Binding.ComponentInterface(@"env")]\n    public partial interface IEnv\n    {\n        [global::WaaS.ComponentModel.Binding.ComponentApi(@"show-message")]\n        global::System.Threading.Tasks.ValueTask ShowMessage(string @speaker, string @message);\n\n        [global::WaaS.ComponentModel.Binding.ComponentApi(@"show-options")]\n        global::System.Threading.Tasks.ValueTask<uint> ShowOptions(global::System.ReadOnlyMemory<string> @options);\n\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"There are various attributes attached to the generated code, which allow the Source Generator to generate the code that actually exchanges values between the WebAssembly component and C#."}),"\n",(0,s.jsxs)(n.p,{children:["Then implement the ",(0,s.jsx)(n.code,{children:"IEnv"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'class Env : IEnv\n{\n    public static readonly Env Instance = new();\n\n    public async ValueTask ShowMessage(string speaker, string message)\n    {\n        Debug.Log($"{speaker}: {message}");\n    }\n\n    public async ValueTask<uint> ShowOptions(ReadOnlyMemory<string> options)\n    {\n        Debug.Log($"Options: {string.Join(", ", options.ToArray())}");\n        return 0;\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Now it's time to run the component. Pass an instance of a class that implements ",(0,s.jsx)(n.code,{children:"IEnv"})," to the component, and ",(0,s.jsx)(n.code,{children:"ShowMessage()"})," and ",(0,s.jsx)(n.code,{children:"ShowOptions()"})," will be called from within the component."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'[SerializeField] private ComponentAsset componentAsset;\n\nvar component = componentAsset.LoadComponent();\n\n// Instantiate the component\nvar instance = component.Instantiate(null, new Dictionary<string, ISortedExportable>()\n{\n    // Import the `env` implementation\n    { "my-game:my-sequencer/env", IEnv.CreateWaaSInstance(Env.Instance) }\n});\n\nusing var context = new ExecutionContext();\nvar wrapper = new ISequence.Wrapper(instance, context);\n\n// Run\nawait wrapper.Play();\n'})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var o=t(96540);const s={},a=o.createContext(s);function i(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);