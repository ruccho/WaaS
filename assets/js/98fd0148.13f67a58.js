"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[44103],{40493:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"core/bindings","title":"Bindings","description":"You can import C# methods as WebAssembly functions.","source":"@site/docs/core/bindings.md","sourceDirName":"core","slug":"/core/bindings","permalink":"/WaaS/core/bindings","draft":false,"unlisted":false,"editUrl":"https://github.com/ruccho/WaaS/tree/main/docs/docs/core/bindings.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Bindings","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Calling a function","permalink":"/WaaS/core/calling-function"},"next":{"title":"Wasm Specifications","permalink":"/WaaS/core/spec"}}');var a=t(74848),s=t(28453);const i={title:"Bindings",sidebar_position:4},c=void 0,r={},l=[];function u(n){const e={code:"code",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.p,{children:"You can import C# methods as WebAssembly functions."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'var module = await moduleAsset.LoadModuleAsync();\nvar instance = new Instance(module, new Imports()\n{\n    {\n        "module name", new ModuleExports()\n        {\n            {\n                "some function",\n                CoreBinder.Instance.ToExternalFunction((Func<int, long, float, double, int>)SomeFunction)\n            }\n        }\n    }\n});\n\nstatic int SomeFunction(int a, long b, float c, double d)\n{\n    return default;\n}\n'})}),"\n",(0,a.jsx)(e.p,{children:"This method allows you to call functions without boxing by automatically generating marshalling code internally based on the delegate type."}),"\n",(0,a.jsx)(e.p,{children:"A low-level method that does not use Source Generator is also available:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'var module = await moduleAsset.LoadModuleAsync();\nvar instance = new Instance(module, new Imports()\n{\n    {\n        "module name", new ModuleExports()\n        {\n            {\n                "some function", SomeFunction.Instance\n            }\n        }\n    }\n});\n\nprivate class SomeFunction : ExternalFunction\n{\n    public static readonly SomeFunction Instance = new();\n\n    public override FunctionType Type { get; } = new(new[]\n    {\n        ValueType.I32,\n        ValueType.I64,\n        ValueType.F32,\n        ValueType.F64,\n    }, new[]\n    {\n        ValueType.I32,\n    });\n\n    public override void Invoke(ExecutionContext context, ReadOnlySpan<StackValueItem> parameters, Span<StackValueItem> results)\n    {\n        results[0] = new StackValueItem(0);\n    }\n}\n'})})]})}function d(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(u,{...n})}):u(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>c});var o=t(96540);const a={},s=o.createContext(a);function i(n){const e=o.useContext(s);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:i(n.components),o.createElement(s.Provider,{value:e},n.children)}}}]);